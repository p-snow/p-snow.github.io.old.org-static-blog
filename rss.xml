<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[.dot life]]></title>
<description><![CDATA[.dot life]]></description>
<link>https://www.p-snow.org</link>
<lastBuildDate>Fri, 29 Dec 2023 06:12:03 +0000</lastBuildDate>
<item>
  <title><![CDATA[Emacsでroot所有のファイルを編集する]]></title>
  <description><![CDATA[
<p>
<preview>
EmacsでPC内のrootユーザ所有のファイルを編集したいという場面は、特にLinuxをお使いなら、けっこうあるのではないでしょうか。もしすでにEmacsが起動していればC-x C-fを押して、ミニバッファに以下を入力するとよいです。(ログインユーザがsudoerであることが前提です)
</preview>
</p>

<div class="org-src-container">
<pre class="src src-text">/sudo:root@localhost:&lt;&#12501;&#12449;&#12452;&#12523;&#12497;&#12473;&gt;
</pre>
</div>

<p>
すでに開いているファイルをroot権限で編集したければ次のようなコマンドを用意してみるのもよいかも。
</p>

<p>
<details><summary>Elisp Code</summary><p>
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">my/sudo-edit-local-file</span> ()
  <span style="font-style: italic;">"Reopen the current buffer file with root privileges."</span>
  (<span style="font-weight: bold;">interactive</span>)
  (<span style="font-weight: bold;">when</span> (file-exists-p buffer-file-name)
    (find-alternate-file
     (concat <span style="font-style: italic;">"/sudo:root@localhost:"</span>
             buffer-file-name))))
</pre>
</div>
<p>
</p></details>
</p>

<p>
以上のような方法でファイルを開こうとするとパスワードを尋ねられるわけですが、auth sourceの仕組みを使って予めパスワードをEmacsが見られるようにしておけば入力せずに済みます。私の場合はpass(password-store)を使っているので以下のような感じ。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="font-weight: bold;">require</span> '<span style="font-weight: bold; text-decoration: underline;">auth-source</span>)
(<span style="font-weight: bold;">require</span> '<span style="font-weight: bold; text-decoration: underline;">auth-source-pass</span>)

(auth-source-pass-enable)
</pre>
</div>

<p>
あとは ~/.password-store/&lt;hostname&gt;/&lt;username&gt;.gpg の一行目にログインパスワードを書けばOK。
</p>
<div class="taglist"><a href="https://www.p-snow.org/tags.html">Tags</a>: <a href="https://www.p-snow.org/tag-emacs.html">emacs</a> <a href="https://www.p-snow.org/tag-japanese.html">japanese</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[japanese]]></category>
  <link>https://www.p-snow.org/20231203-1930.html</link>
  <guid>https://www.p-snow.org/20231203-1930.html</guid>
  <pubDate>Sun, 03 Dec 2023 19:30:00 +0000</pubDate>
</item>
<item>
  <title><![CDATA[Orgの項目を自分宛てにメールする]]></title>
  <description><![CDATA[
<p>
<preview>
「２要素認証で必要だから」。残念な話だが、私がスマホをもつ最大の理由がコレだ。世の中にはモバイル機器だけでいろいろなことをやろうと腐心する方々がいるが、その流れには個人的に乗れずにいる。それでも<a href="https://lwn.net/Articles/936576/">EmacsのAndroid対応</a>が議論を呼んだり、<a href="https://organice.200ok.ch/">こちら</a>や<a href="https://orgzly.com/">あちら</a>のようにOrgをモバイルで使える手段が増えることにはポジティブな印象をもっている。ただ私はと言うと、PCでつくったOrgの内容をメールとしてモバイル端末で見られれば充分だ。
</preview>
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="font-weight: bold;">require</span> '<span style="font-weight: bold; text-decoration: underline;">smtpmail</span>)
(<span style="font-weight: bold;">require</span> '<span style="font-weight: bold; text-decoration: underline;">message</span>)

(<span style="font-weight: bold;">setq</span> smtpmail-default-smtp-server <span style="font-style: italic;">"&lt;&lt;smtp-host&gt;&gt;"</span>
      smtpmail-smtp-service 465
      smtpmail-smtp-user user-mail-address
      smtpmail-stream-type 'ssl
      smtpmail-mail-address user-mail-address)
(<span style="font-weight: bold;">setq</span> message-send-mail-function 'smtpmail-send-it)

(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">my/org-subtree-send-email</span> ()
  <span style="font-style: italic;">"Send an email containing the contents of the subtree at the entry at point."</span>
  (<span style="font-weight: bold;">interactive</span>)
  (<span style="font-weight: bold;">org-save-outline-visibility</span> t
    (<span style="font-weight: bold;">save-excursion</span>
      (org-fold-show-all)
      (<span style="font-weight: bold;">let*</span> ((heading (org-get-heading t t t t))
             (org-export-with-toc nil)
             (org-export-with-author nil)
             (org-export-show-temporary-export-buffer nil)
             (message-kill-buffer-on-exit t)
             (exp-buf (org-ascii-export-as-ascii nil t t t)))
        (message-mail user-mail-address heading)
        (message-goto-body)
        (insert (<span style="font-weight: bold;">with-current-buffer</span> exp-buf (buffer-string)))
        (message-send-and-exit)))))
</pre>
</div>

<p>
もっともよく活用する用途と言えばToDoリストだろう。買い物リストはその代表例だ。予めOrgの中に店舗ごとのトリガリストをつくっておき、買い物に行く段になったらリストから今回の買うべきターゲットを浮かび上がらせてコマンド一発でメール送信。トクバイを知らせるアプリに踊らされることもないし、なんちゃらペイをフル活用してお得にポイントを貯めることもない。
</p>

<p>
あとは考えたいことリストだろうか。散歩中に時間ができたときなど、脳にまかせて気ままに思考を走らせると脱線がすぎるので、その交通整理役としてリストをつくっておきメール送信することがたまにはある。いずれにしても、PC上で作戦を練り出先でそれを実行するというスキームにおいて、私はスマホの第二の活用法を見出しているようだ。そのスキームを支えるのには、メールという古典的でオープンな仕組みが望ましい。
</p>
<div class="taglist"><a href="https://www.p-snow.org/tags.html">Tags</a>: <a href="https://www.p-snow.org/tag-org.html">org</a> <a href="https://www.p-snow.org/tag-japanese.html">japanese</a> <a href="https://www.p-snow.org/tag-mail.html">mail</a> </div>]]></description>
  <category><![CDATA[org]]></category>
  <category><![CDATA[japanese]]></category>
  <category><![CDATA[mail]]></category>
  <link>https://www.p-snow.org/20231128-1043.html</link>
  <guid>https://www.p-snow.org/20231128-1043.html</guid>
  <pubDate>Tue, 28 Nov 2023 10:43:00 +0000</pubDate>
</item>
<item>
  <title><![CDATA[Org内でタスク名のヒストリを残す]]></title>
  <description><![CDATA[
<p>
<preview>
タスクとは、生まれて実施されて終えられて捨てられる。そんな存在。たとえ賞味の実施期間は短くとも、タスクのライフサイクル全体を見れば、管理する当人も驚くくらいに長くなっていたなんてことはザラにあるのではないでしょうか。長い時間というものはいろいろなものを変え得る可能性を秘めています。ビジネスの風向きが変わることもあれば、生活環境が変わることもあるでしょう。そんな変化を経てもタスクだけは絶対に不変であるなんてことはもちろんありません。もしかしたらタスクの中身、つまりやることは不変だったとしても、タスク管理者のタスクに対するまなざしが変わっていたなんてこともあるでしょう。そんなときにおもうのです。「このタスク名、何か変じゃね」と。
</preview>
</p>

<p>
タスク名を変える。行為としてはこんな簡単なことはありません。でも私はこれが苦手でした。なぜでしょうか。ひとつには、改名するにあたり経年したタスクと真剣に向き合い直す必要があり、メンタル負荷的にこれを避けたいという心理がはたらいていたのかもしれません。もう一つは、改名することで前のタスク名が完全に消されてしまい、タスクの時間的な変遷が隠れてしまうことを惜しんでいたフシがあるような気がします。タスクを作成した当初はこういう意図や動機があってこう名付けたが、事情や事態が変わってああいうタスク名になった、というような情報は個人的には軽視できないメタ情報だとおもいます。タスク内にメモすればいいわけですが、改名のワークフローとフォーマットは統一されていた方が自分好みなので下のようなコードを書きました。新しいタスク名を入力するとタスクが改名されると同時に一つ前のタスク名は日付情報とともにヒストリとして保存されます。
</p>

<p>
<details><summary>Elisp Code</summary><p>
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="font-weight: bold;">setq</span> org-log-into-drawer t)

(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">my/org-change-heading</span> ()
  <span style="font-style: italic;">"CHange the heading of the entry at `</span><span style="font-weight: bold; font-style: italic; text-decoration: underline;">point</span><span style="font-style: italic;">'.</span>

<span style="font-style: italic;">The previous name will be stored along with the execution date."</span>
  (<span style="font-weight: bold;">interactive</span>)
  (<span style="font-weight: bold;">let*</span> ((old-heading (org-get-heading t t t t))
         (new-heading (read-string <span style="font-style: italic;">"Heading: "</span> old-heading)))
    (<span style="font-weight: bold;">save-excursion</span>
      (org-back-to-heading t)
      (replace-string old-heading new-heading nil
                      (line-beginning-position) (line-end-position))
      (org-align-tags))
    (org-add-log-setup 'state new-heading old-heading 'state)))
</pre>
</div>
<p>
</p></details>
</p>

<p>
この機能を使うようになってからタスクの作成と改名が軽快におこなえるようになった気がします。「会議で提案されたアレをやっておく」のようなタスクが作成できるようになって、後で修正すせばいいからとタスク作成の心理的な負荷が軽減される一方で、修正後に残されたヒストリを見て「発生時にはアレと呼ばなければならないくらい、このタスクはあの時点では自分にとって新規性の高いものだったんだな」などと振り返ることができるのです。
</p>
<div class="taglist"><a href="https://www.p-snow.org/tags.html">Tags</a>: <a href="https://www.p-snow.org/tag-org.html">org</a> <a href="https://www.p-snow.org/tag-japanese.html">japanese</a> </div>]]></description>
  <category><![CDATA[org]]></category>
  <category><![CDATA[japanese]]></category>
  <link>https://www.p-snow.org/20231121-1858.html</link>
  <guid>https://www.p-snow.org/20231121-1858.html</guid>
  <pubDate>Tue, 21 Nov 2023 18:58:00 +0000</pubDate>
</item>
<item>
  <title><![CDATA[TempEL, an Emacs package for managing templates]]></title>
  <description><![CDATA[
<p>
<preview>
<a href="https://github.com/joaotavora/yasnippet#start-of-content">YASnippet</a> had been my go-to package until I came across <a href="https://www.reddit.com/r/emacs/comments/yuyqqj/can_tempel_replace_yasnippet/">this thread</a>. Now I'm excited about yet another Emacs template system named "<a href="https://github.com/minad/tempel">TempEL</a>". YASnippet is undoubtedly a great package for handling snippets formatted like in TextMate. The only drawback I often encounter is that the package manages each snippet in a separate file, and acquiring the snippet format can be slightly challenging. TempEL addressed this concern with the 'tempo' format, which has been around in Emacs for decades.
</preview>
</p>

<p>
The following two templates are used to create the same skeleton for a blog post in Org-mode, using YASnippet and TempEL as the respective tools.
</p>

<p>
<details><summary>YASnippet</summary><p>
</p>
<div class="org-src-container">
<pre class="src src-text"># -*- mode: snippet -*-
# name: blog-post
# key: blog
# --
* ${1:blog_title}
SCHEDULED: ${2:`(format-time-string "&lt;%Y-%m-%d %a&gt;")`}
:PROPERTIES:
:EXPORT_FILE_NAME: ${3:`(format-time-string "%Y%m%d_%H%M")`}
:END:
${0:`(org-expiry-insert-created)`}
</pre>
</div>
<p>
</p></details>
</p>

<p>
<details><summary>TempEL</summary><p>
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(blog &amp; (org-insert-heading-after-current)
      (p <span style="font-style: italic;">"blog title: "</span> title t) (insert title)
      (<span style="font-weight: bold;">prog1</span> nil (org-schedule nil (current-time)))
      (org-entry-put (point) <span style="font-style: italic;">"EXPORT_FILE_NAME"</span> (format-time-string <span style="font-style: italic;">"%Y%m%d_%H%M"</span>)))
</pre>
</div>
<p>
</p></details>
</p>

<p>
As you can see, the TempEL format allows you to write templates in full Lisp data code, whereas YASnippet's format permits the use of Lisp code to a limited extent, as long as the code does not directly manipulate buffer contents. That's the point I'd like to recommend TempEL to Lispers and Emacs enthusiasts. You can see <a href="https://github.com/p-snow/config/blob/main/dotfiles.org#my-tempel-templates-in-modes">my TempEL templates</a> being incorporated into <a href="https://www.p-snow.org/config/dotfiles.html">my configuration collection</a>.
</p>
<div class="taglist"><a href="https://www.p-snow.org/tags.html">Tags</a>: <a href="https://www.p-snow.org/tag-emacs.html">emacs</a> <a href="https://www.p-snow.org/tag-english.html">english</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[english]]></category>
  <link>https://www.p-snow.org/20231119-1024.html</link>
  <guid>https://www.p-snow.org/20231119-1024.html</guid>
  <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
</item>
<item>
  <title><![CDATA[Org-modeは九龍城砦]]></title>
  <description><![CDATA[
<p>
<preview>
以下の記事を興味深く読みました。
</p>

<p>
<a href="https://rashita.net/blog/?org-mode%E3%81%A8%E3%81%84%E3%81%86%E4%BC%9D%E7%B5%B1">https://rashita.net/blog/?org-mode%E3%81%A8%E3%81%84%E3%81%86%E4%BC%9D%E7%B5%B1</a>
</p>

<p>
Logseq や Obsidian に org-mode が提供する機能(のいくつか)が取り入れられて、多くのユーザに支持されているようで、個人的には喜ばしいことだなと思っています。(すいません、どちらも使ったことはありません。)この現象をみていると私は、org-modeで提供されているある機能と、それを参考にして実装された他アプリの機能は同じなのか、ということをよく考えます。いや、機能としては確かにほぼ同等だろうとは思います。もちろん優劣の話でもありません。以下に展開してみましょう。
</preview>
</p>

<p>
org-modeは、確かに出来ることを列挙していくと「重厚な思想に基づいてつくられた巨大なシステム」のように見えますが、その実体は細かいピースの集合体です。そのピースとは何か。それは、ユーザが自由に弄ることのできる設定項目と、設定を反映しながら少し気の利いたことをしてくれるコマンドもしくは関数です。
</p>


<p>
これらのピースは、長い年月をかけてユーザの「こういうのあったらいいよね」を具現化して積み上げられてきました。自由闊達に。昔、誰かがブログでorg-modeを評して、「欲しい機能を好き勝手に入れ込んで積み上げられた九龍城砦のような違法建築」と言っていて、言い得て妙だなと思いました。この表現が適切かは分かりませんが、一定程度は的を射ているとおもいます。
</p>

<p>
<a href="https://www.youtube.com/watch?v=No_vQ8FiQiw">Kowloon walled city 九龍城砦 - YouTube</a>
</p>

<p>
一方でorg-mode全体として整合性をとる必要はもちろんあるので、現メンテナのBastien Guerryの苦労は推して知るべし、かなと思っています。結果としてorg-modeは、細かいところまで設定できる柔軟性をもつ反面、ユーザに一定以上のリテラシを要求するものに仕上がったのだとおもいます。さらに言えば、この複雑な仕様ゆえにMarkdownのように標準化が進まず、結果として他のプラットフォームへの進出が芳しくない状態になっているのではないかと推察します。
</p>

<p>
つまり私がおもうのは、org-modeは、Big Pictureから精緻にデザインされたのではなく、ユーザのニーズに応え続けた「結果」であるということです。我々がorg-modeに抱く「思想」や「システム性」は後付けでしかないのではないか、と。(もちろんEmacsから受け継ぐ、特にテキスト編集における、ある種の「思想」はあります)
</p>

<p>
さて、最初の話に戻りましょう。org-modeの機能の一部を他のアプリが実装することだけを考えれば、それはそれほどむずかしいことではないかもしれません。しかし、org-modeにおける機能と機能の複雑な連携を考慮に入れようとすると、とたんに難易度が爆上がりする気がします。
</p>

<p>
加えて、機能と(キーボードメインの)ユーザ操作が独特のつながりをもつEmacsというプラットフォーム上での「体験」という点を考えれば、やはり両者はベツモノと考えた方がいいのではないか。現時点での私は、今のノートアプリ界隈の流れを見てそんなことを考えています。
</p>
<div class="taglist"><a href="https://www.p-snow.org/tags.html">Tags</a>: <a href="https://www.p-snow.org/tag-org.html">org</a> <a href="https://www.p-snow.org/tag-japanese.html">japanese</a> </div>]]></description>
  <category><![CDATA[org]]></category>
  <category><![CDATA[japanese]]></category>
  <link>https://www.p-snow.org/20230713-1703.html</link>
  <guid>https://www.p-snow.org/20230713-1703.html</guid>
  <pubDate>Thu, 13 Jul 2023 17:03:00 +0000</pubDate>
</item>
</channel>
</rss>
